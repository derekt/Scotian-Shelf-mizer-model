geom_tile(aes(fill = Sp)) +
#     scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
# scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                                          space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
coord_equal()+
theme_opts
}
} else
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 1, title = coltitle),
#  scale_fill_gradient2(low = "#5A672D", mid = '#C59443',  high = '#6A9EC1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                      space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
#
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# #    scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 1, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                     space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
#
coord_equal()+
theme_opts
}
}
}
#Inputs: a 360 x 180 matrix, with lon from -180 to 180, lat from 90 to -90
# a string representing the data title
plot_FISH_MIP_halfdeg <- function(data_to_plot, data_title, plot_limits = c(min(min(data_to_plot, na.rm=T),na.rm=T),
max(max(data_to_plot, na.rm=T)),na.rm=T), flip_latitudes = FALSE,
colour_scheme = 1, show_coast = TRUE, coltitle = "")
{
colRam <- colorRampPalette(c("blue","yellow","red"))
#WL <- readShapePoly("c:/users/abuchholz/Dropbox/Phd/Analysis/fishMip/analysis/fishMip/shapefiles/10m_physical/ne_10m_land.shp")#download from 'naturalearth.com'
WL <- readShapePoly("c:/users/derekt/work/research/data/coastline/ne_10m_land/ne_10m_land.shp")#download from 'naturalearth.com'
wgs1984.proj <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(WL) <- wgs1984.proj
# Assume that the data are coming in starting from -180 and the mapping script expects to start at 0, so fix here
#temp_array3 = data_to_plot
#data_to_plot[1:180,] = data_to_plot[181:360,]
#data_to_plot[181:360,] = temp_array3[1:180,]
#remove(temp_array3)
# Set up the raster
if (flip_latitudes)
e <- extent(c(-180,180,90,-90))
else
e <- extent(c(-180, 180, -90, 90))
r2 <- raster(nrows = 360, ncols = 720, ext = e)
r2[] <- t(data_to_plot)
# Set up projections
robinson_proj <- CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
worldRobinson <- spTransform(WL, robinson_proj)
wgs1984<- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
projection(r2) <-wgs1984
cc_rob <-projectRaster(r2, crs = robinson_proj, over = T)
# To convert your RasterLayer to a data.frame, you need to convert it to
# a SpatialPixelsDataFrame first
r.1 <- rasterToPoints(cc_rob)
r.1.df <- as.data.frame(r.1)
colnames(r.1.df) <-c("x","y","Sp")
num_dp = 0
# then you can use ggplot2 to plot that object
library(ggplot2)
library(scales)
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
legend.key.height = unit(0.7, "cm"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=12)))
if (colour_scheme == 1)
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left"),
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
#  scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left"),
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
coord_equal()+
theme_opts
}
} else
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left"),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
#  scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left"),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
coord_equal()+
theme_opts
}
}
}
# a string representing the data title
plot_FISH_MIP_shape <- function(data_to_plot, data_title, plot_limits = c(min(min(data_to_plot, na.rm=T),na.rm=T),
max(max(data_to_plot, na.rm=T)),na.rm=T), colour_scheme = 1,
show_coast = TRUE, coltitle = "")
{
# ggplot() +
#    geom_polygon(data = ab_join, aes(x = long, y = lat, group = group, fill = difference),
#                 colour = "black", size = 0.5)
colRam <- colorRampPalette(c("blue","yellow","red"))
WL <- readShapePoly("c:/users/derekt/desktop/gshhg-shp-2.3.6/gshhs_shp/c/GSHHS_c_L1.shp")
WL2 <- readShapePoly("c:/users/derekt/desktop/gshhg-shp-2.3.6/gshhs_shp/c/GSHHS_c_L6.shp")
WL <- rbind(WL, WL2)
WL <- rbind(WL, WL2)
wgs1984.proj <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Set up the raster
#e <- extent(c(-180, 180, -90, 90))
#r2 <- raster(nrows = 180, ncols = 360, ext = e)
#r2[] <- t(data_to_plot)
# Set up projections
robinson_proj <- CRS("+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
worldRobinson <- spTransform(WL, robinson_proj)
data_to_plot <-spTransform(data_to_plot, robinson_proj)
ab = fortify(data_to_plot)
data_to_plot@data$id <- 0:(dim(data_to_plot@data)[1]-1) # add id field
ab_join = plyr::join(x = ab,y = data_to_plot@data, by="id")
#projection(r2) <-wgs1984
#cc_rob <-projectRaster(r2, crs = robinson_proj, over = T)
# To convert your RasterLayer to a data.frame, you need to convert it to
# a SpatialPixelsDataFrame first
#r.1 <- rasterToPoints(cc_rob)
#r.1.df <- as.data.frame(r.1)
#colnames(r.1.df) <-c("x","y","Sp")
num_dp = 0
# then you can use ggplot2 to plot that object
library(ggplot2)
library(scales)
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
legend.key.height = unit(0.7, "cm"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=12, hjust = 0.5)))
if (colour_scheme == 0)
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
coord_equal()+
theme_opts
ggplot() +
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = ab_join, aes(x = long, y = lat, group = group, fill = difference),
colour = "black", size = 0.5) +
labs(title = data_title) +
#geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
#     scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
# scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                                          space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
coord_equal()+
theme_opts
}
} else if (colour_scheme == 1)
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
scale_fill_gradient2(low = 'white', mid = "darkseagreen1",  high = 'darkseagreen', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                                        space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
#     scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
# scale_fill_gradient2(low = 'royalblue1', mid = "yellow1",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
scale_fill_gradient2(low = 'white', mid = "skyblue1",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 0.5, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                                          space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
coord_equal()+
theme_opts
}
} else
{
if (show_coast)
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 1, title = coltitle),
#  scale_fill_gradient2(low = "#5A672D", mid = '#C59443',  high = '#6A9EC1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
geom_polygon(data = worldRobinson, aes(x = long, y = lat, group = group),col=c('black'),fill='black')+
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                      space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
#
coord_equal()+
theme_opts
} else
{
r1_gg <- ggplot(r.1.df, aes(x=x, y=y)) +
geom_tile(aes(fill = Sp)) +
# #    scale_fill_gradient2(low = 'royalblue1', mid = "white",  high = 'red', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1, title = expression(paste('kg C m' ^ '-2'))),
scale_fill_gradient2(low = 'red', mid = "white",  high = 'royalblue1', limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "right", title.hjust = 1, title = coltitle),
midpoint = ((plot_limits[2]-plot_limits[1])/2 + plot_limits[1]),
space = "Lab",name = "", na.value='lightgrey',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
labs(title = data_title) +
# scale_fill_viridis(option="magma",limits = c(plot_limits[1], plot_limits[2]),oob = squish, guide = guide_colorbar(label.position = "left", title.hjust = 1),
#                     space = "Lab",name = "", na.value='white',breaks = seq(plot_limits[1],plot_limits[2],length.out = 5),
#                    labels = format(round(seq(plot_limits[1],plot_limits[2],length.out = 5),digits = num_dp), nsmall = num_dp)) +
#
coord_equal()+
theme_opts
}
}
}
print(plot_FISH_MIP(model_average, maptitle_average, mean_plot_colour_values, colour_scheme = 2, coltitle = ""), vp = vplayout(1, 1),grid.show.layout = TRUE)
q()
30 + 60 + 7.25 + 30 + 40 + 60 + 10 + 14 + 10 + 6 + 14 + 3
5 * 1.023
5^1.023
5 * 1.023^2
5 * 1.023 * 1.023
5 * 1.023 * 1.023 * 1.023
5 * 1.023^3
5 * 1.023^24
8.62 * 13 * 52
795 * 1.023^24
5 * 13 * 52
load("C:/Users/derekt/Work/Research/Dropbox (Old)/LegalIllegalAnalogues/US_hierarchical_FITS_nb_effort_both_all.Rdata")
2166.9 / 2
2897/40
2897.40 / 2
1083.45 / 2
2897.4 / 2
1448/7 / 2
1448.7/2
1083.45 + 1448.7 + 2144.05
510 / 3594
6000 / 26000
install.packages("mizer")
install.packages("mizer")
library(mizer)
install.packages("mizer")
library(mizer)
params <- newMultispeciesParams(NS_species_params, inter)
install.packages(c("backports", "BH", "broom", "callr", "checkmate", "classInt", "cli", "concaveman", "covr", "crosstalk", "deldir", "devtools", "digest", "doBy", "dplyr", "DT", "ellipsis", "fansi", "farver", "fields", "fs", "ggplot2", "ggpubr", "ggrepel", "gh", "git2r", "glue", "gstat", "gtools", "hexbin", "httpuv", "intervals", "jsonlite", "lifecycle", "lme4", "loo", "maptools", "matrixStats", "mime", "ncf", "nloptr", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "ps", "purrr", "raster", "Rcpp", "remotes", "reshape2", "rex", "rgdal", "rlang", "roxygen2", "rstan", "rstudioapi", "rversions", "scales", "sf", "shiny", "sp", "spacetime", "spData", "StanHeaders", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "units", "usethis", "V8", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "checkmate", "classInt", "cli", "concaveman", "covr", "crosstalk", "deldir", "devtools", "digest", "doBy", "dplyr", "DT", "ellipsis", "fansi", "farver", "fields", "fs", "ggplot2", "ggpubr", "ggrepel", "gh", "git2r", "glue", "gstat", "gtools", "hexbin", "httpuv", "intervals", "jsonlite", "lifecycle", "lme4", "loo", "maptools", "matrixStats", "mime", "ncf", "nloptr", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "ps", "purrr", "raster", "Rcpp", "remotes", "reshape2", "rex", "rgdal", "rlang", "roxygen2", "rstan", "rstudioapi", "rversions", "scales", "sf", "shiny", "sp", "spacetime", "spData", "StanHeaders", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "units", "usethis", "V8", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "checkmate", "classInt", "cli", "concaveman", "covr", "crosstalk", "deldir", "devtools", "digest", "doBy", "dplyr", "DT", "ellipsis", "fansi", "farver", "fields", "fs", "ggplot2", "ggpubr", "ggrepel", "gh", "git2r", "glue", "gstat", "gtools", "hexbin", "httpuv", "intervals", "jsonlite", "lifecycle", "lme4", "loo", "maptools", "matrixStats", "mime", "ncf", "nloptr", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "ps", "purrr", "raster", "Rcpp", "remotes", "reshape2", "rex", "rgdal", "rlang", "roxygen2", "rstan", "rstudioapi", "rversions", "scales", "sf", "shiny", "sp", "spacetime", "spData", "StanHeaders", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "units", "usethis", "V8", "withr", "xml2", "xts", "yaml", "zoo"))
library(mizer)
install.packages(c("dplyr", "glue", "purrr", "raster", "Rcpp", "rlang", "sp", "tibble", "tidyselect"))
install.packages(c("dplyr", "glue", "purrr", "raster", "Rcpp", "rlang", "sp", "tibble", "tidyselect"))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove()
install.packages("rlang")
install.packages("rlang")
rm(list = ls())
gc()
install.packages("rlang")
install.packages(c("dplyr", "glue", "purrr", "raster", "Rcpp", "rlang", "sp", "tibble", "tidyselect"))
library(mizer)
params <- newMultispeciesParams((NS_species_params, inter))
params <- newMultispeciesParams(NS_species_params, inter)
sim <- project(params, t_max = 10, effort = 0)
plot(sim)
params <- newCommunityParams()
params
summary(params)
params<-newMultispeciesParams(NS_species_params, inter)
summary(params)
getProportionOfLargeFish(sim,
species = "Herring",
threshold_w = 50,
biomass_proportion = TRUE)
library(mizer)
params <- set_community_model(z0 = 0.1, f0 = 0.7, alpha = 0.2, recruitment = 4e7)
slotNames(params)
params"w"
params@w
sim <- project(params, t_max = 50, effort = 0)
plot(sim)
library(data.table)
?data.table
library(flights)
mpg
load(mpg)
library(ggplot2)
mpg
library(data.table)
xx = as.data.table(mpg)
class(mpg)
class(xx)
xx
mpg
mpg <- order(mpg, by = cty)
mpg <- order(mpg, by = mpg$cty)
mpg[order(model, -displ)]
xx[order(model, -displ)]
ans <- xx[manufacturer = "toyota", .(cyl = mean(cyl), hwy = mean(hwy))]
ans <- xx[manufacturer == "toyota", .(cyl = mean(cyl), hwy = mean(hwy))]
ans
mean(mpg$cyl[mpg$manufacturer == "toyota"])
ans <- xx[manufacturer == "toyota", .(cyl = mean(cyl)]
ans <- xx[manufacturer == "toyota", .(cyl = mean(cyl))]
xx[manufacturer == "toyota", .N]
dim(xx[manufacturer == "toyota"])
ans <- xx[,.(.N),by = .(manufacturer)]
ans
ans <- xx[,.N,by = .(manufacturer)]
ans
class(ans)
input <- if (file.exists("flights14.csv")) {
"flights14.csv"
} else {
"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
}
flights <- fread(input)
flights
library(data.table)
input <- if (file.exists("flights14.csv")) {
"flights14.csv"
} else {
"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
}
flights <- fread(input)
flights
dim(flights)
ans <- flights[order(origin, -dest)]
head(ans)
xx = as.data.frame(flights)
]
# Sort by vector name [z] then [x]
dataframe[
with(dataframe, order(z, x)),
]
ans2<-xx[with(xx, order("origin", "dest"))]
head(ans2)
ans2<-xx[with(xx, order("origin", "dest")),]
head(ans2)
dim(ans2)
dim(xx)
ans2<-xx[with(xx, order("origin")),]
head(ans2)
ans2<-xx[with(xx, order(xx$origin, -xx$dest)),]
ans2<-xx[with(xx, order(xx$origin, -xx$dest)),]
ans2<-xx[with(xx, order(xx$origin)),]
head(ans2)
ans <- flights[order(origin)]
head(ans)
vignette(data.table)
"datatable-keys-fast-subset"
?data.table
vignette(package="data.table")
vignette("datatable-reshape")
vignette("datatable-importing")
vignette("datatable-reference-semantics             Reference semantics (source, html)
")
vignette("datatable-reference-semantics")
vignette("datatable-keys-fast-subset")
vignette("datatable-secondary-indices-and-auto-indexing")
vignette("datatable-benchmarking")
vignette("datatable-reference-semantics ")
vignette("datatable-reference-semantics")
vignette("datatable-sd-usage")
log(0.2)
exp(0.2)
log(1.2)
log(2.5)
setwd("c:/users/derekt/work/IsabelleFishery/")
mizer_w = read.csv("mizer_w.csv")
observe_w = read.csv("observe_w.csv")
dev.new()
axis_lim = max(c(observe_w$pro, mizer_w$pro))
plot(observe_w$pro, mizer_w$pro, col = rainbow(length(mizer_w$pro)), pch = 19, xlim = c(0, axis_lim), ylim = c(0, axis_lim), xlab = "Observed proportion", ylab = "Modelled proportion")
abline(a = 0, b = 1, lty = 2)
legend("top", legend = as.character(observe_w$ï..species), col = rainbow(length(mizer_w$pro)), pch = 19, cex = 0.75)
# Alternative plots
dev.new(width=8, height=11)
par(mfcol = c(1,3))
#par(mar = c(5,9,4,2))
y_locs = seq(length(mizer_w$pro),1)
a = sort(mizer_w$pro, decreasing = TRUE, index.return = TRUE)
plot(a$x, y_locs, xlim = c(0, axis_lim), xlab = "Modelled proportion", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
#axis(side = 2, at = y_locs, cex.axis = 0.6, labels =  mizer_w$ï..species[a$ix], las = 1)
#par(mar = c(5,5,4,2))
plot(observe_w$pro[a$ix], y_locs, xlim = c(0, axis_lim), xlab = "Observed proportion", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
plot(a$x - observe_w$pro[a$ix], y_locs, xlim = c(-axis_lim, axis_lim), xlab = "Modelled - observed", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
abline(v = 0, lty = 2)
# Alternative plots
dev.new(width=8, height=11)
par(mfcol = c(1,3))
#par(mar = c(5,9,4,2))
y_locs = seq(length(mizer_w$pro),1)
a = sort(mizer_w$pro, decreasing = TRUE, index.return = TRUE)
plot(a$x, y_locs, xlim = c(0, axis_lim), xlab = "Modelled proportion", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
#axis(side = 2, at = y_locs, cex.axis = 0.6, labels =  mizer_w$ï..species[a$ix], las = 1)
#par(mar = c(5,5,4,2))
plot(observe_w$pro[a$ix], y_locs, xlim = c(0, axis_lim), xlab = "Observed proportion", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
plot(a$x - observe_w$pro[a$ix], y_locs, xlim = c(-axis_lim, axis_lim), xlab = "Modelled - observed", ylab = "", yaxt = "n", pch = 19, col = rainbow(length(mizer_w$pro)))
abline(v = 0, lty = 2)
